/*
 * This file is generated by jOOQ.
 */
package com.singerdream.textdetection.tables;


import com.singerdream.textdetection.Keys;
import com.singerdream.textdetection.Public;
import com.singerdream.textdetection.tables.records.SensitiveWordRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SensitiveWord extends TableImpl<SensitiveWordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sensitive_word</code>
     */
    public static final SensitiveWord SENSITIVE_WORD = new SensitiveWord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SensitiveWordRecord> getRecordType() {
        return SensitiveWordRecord.class;
    }

    /**
     * The column <code>public.sensitive_word.id</code>.
     */
    public final TableField<SensitiveWordRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sensitive_word.content</code>.
     */
    public final TableField<SensitiveWordRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR.nullable(false), this, "");

    private SensitiveWord(Name alias, Table<SensitiveWordRecord> aliased) {
        this(alias, aliased, null);
    }

    private SensitiveWord(Name alias, Table<SensitiveWordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sensitive_word</code> table reference
     */
    public SensitiveWord(String alias) {
        this(DSL.name(alias), SENSITIVE_WORD);
    }

    /**
     * Create an aliased <code>public.sensitive_word</code> table reference
     */
    public SensitiveWord(Name alias) {
        this(alias, SENSITIVE_WORD);
    }

    /**
     * Create a <code>public.sensitive_word</code> table reference
     */
    public SensitiveWord() {
        this(DSL.name("sensitive_word"), null);
    }

    public <O extends Record> SensitiveWord(Table<O> child, ForeignKey<O, SensitiveWordRecord> key) {
        super(child, key, SENSITIVE_WORD);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<SensitiveWordRecord, Long> getIdentity() {
        return (Identity<SensitiveWordRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SensitiveWordRecord> getPrimaryKey() {
        return Keys.SENSITIVE_WORD_PKEY;
    }

    @Override
    public List<UniqueKey<SensitiveWordRecord>> getKeys() {
        return Arrays.<UniqueKey<SensitiveWordRecord>>asList(Keys.SENSITIVE_WORD_PKEY);
    }

    @Override
    public SensitiveWord as(String alias) {
        return new SensitiveWord(DSL.name(alias), this);
    }

    @Override
    public SensitiveWord as(Name alias) {
        return new SensitiveWord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SensitiveWord rename(String name) {
        return new SensitiveWord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SensitiveWord rename(Name name) {
        return new SensitiveWord(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
