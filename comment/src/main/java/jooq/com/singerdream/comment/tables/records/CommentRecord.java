/*
 * This file is generated by jOOQ.
 */
package com.singerdream.comment.tables.records;


import com.singerdream.comment.tables.Comment;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> implements Record8<Long, String, Long, Boolean, LocalDateTime, Long, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.comment.id</code>.
     */
    public CommentRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.comment.content</code>.
     */
    public CommentRecord setContent(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.content</code>.
     */
    public String getContent() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.comment.publisher_id</code>.
     */
    public CommentRecord setPublisherId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.publisher_id</code>.
     */
    public Long getPublisherId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.comment.active</code>.
     */
    public CommentRecord setActive(Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.comment.created_at</code>.
     */
    public CommentRecord setCreatedAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.comment.pid</code>.
     */
    public CommentRecord setPid(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.pid</code>.
     */
    public Long getPid() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.comment.target_id</code>.
     */
    public CommentRecord setTargetId(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.target_id</code>.
     */
    public Long getTargetId() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>public.comment.target_source</code>.
     */
    public CommentRecord setTargetSource(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.target_source</code>.
     */
    public String getTargetSource() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, Long, Boolean, LocalDateTime, Long, Long, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, String, Long, Boolean, LocalDateTime, Long, Long, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Comment.COMMENT.ID;
    }

    @Override
    public Field<String> field2() {
        return Comment.COMMENT.CONTENT;
    }

    @Override
    public Field<Long> field3() {
        return Comment.COMMENT.PUBLISHER_ID;
    }

    @Override
    public Field<Boolean> field4() {
        return Comment.COMMENT.ACTIVE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Comment.COMMENT.CREATED_AT;
    }

    @Override
    public Field<Long> field6() {
        return Comment.COMMENT.PID;
    }

    @Override
    public Field<Long> field7() {
        return Comment.COMMENT.TARGET_ID;
    }

    @Override
    public Field<String> field8() {
        return Comment.COMMENT.TARGET_SOURCE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getContent();
    }

    @Override
    public Long component3() {
        return getPublisherId();
    }

    @Override
    public Boolean component4() {
        return getActive();
    }

    @Override
    public LocalDateTime component5() {
        return getCreatedAt();
    }

    @Override
    public Long component6() {
        return getPid();
    }

    @Override
    public Long component7() {
        return getTargetId();
    }

    @Override
    public String component8() {
        return getTargetSource();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getContent();
    }

    @Override
    public Long value3() {
        return getPublisherId();
    }

    @Override
    public Boolean value4() {
        return getActive();
    }

    @Override
    public LocalDateTime value5() {
        return getCreatedAt();
    }

    @Override
    public Long value6() {
        return getPid();
    }

    @Override
    public Long value7() {
        return getTargetId();
    }

    @Override
    public String value8() {
        return getTargetSource();
    }

    @Override
    public CommentRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CommentRecord value2(String value) {
        setContent(value);
        return this;
    }

    @Override
    public CommentRecord value3(Long value) {
        setPublisherId(value);
        return this;
    }

    @Override
    public CommentRecord value4(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public CommentRecord value5(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public CommentRecord value6(Long value) {
        setPid(value);
        return this;
    }

    @Override
    public CommentRecord value7(Long value) {
        setTargetId(value);
        return this;
    }

    @Override
    public CommentRecord value8(String value) {
        setTargetSource(value);
        return this;
    }

    @Override
    public CommentRecord values(Long value1, String value2, Long value3, Boolean value4, LocalDateTime value5, Long value6, Long value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(Long id, String content, Long publisherId, Boolean active, LocalDateTime createdAt, Long pid, Long targetId, String targetSource) {
        super(Comment.COMMENT);

        setId(id);
        setContent(content);
        setPublisherId(publisherId);
        setActive(active);
        setCreatedAt(createdAt);
        setPid(pid);
        setTargetId(targetId);
        setTargetSource(targetSource);
    }
}
